package programs

import (
	DB "Backend-Bluelock-007/src/database"
	"Backend-Bluelock-007/src/models"
	"context"
	"fmt"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

func getLightweightProgramsPipeline(
	filter bson.M,
	sortField string, sortOrder int, isSortNearest bool,
	skip int64, limit int64,
	majors []string, studentYears []int,
) mongo.Pipeline {

	// ‡πÇ‡∏´‡∏•‡∏î Timezone ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "Asia/Bangkok"
	// ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏´‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
	loc, err := time.LoadLocation("Asia/Bangkok")
	if err != nil {
		// ‡∏´‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î Timezone ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ log error ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÉ‡∏ä‡πâ UTC ‡πÅ‡∏ó‡∏ô
		// ‡∏´‡∏£‡∏∑‡∏≠ panic ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
		// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Production ‡∏Ñ‡∏ß‡∏£ log error ‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
		fmt.Printf("Error loading timezone 'Asia/Bangkok': %v. Using UTC instead.", err)
		loc = time.UTC // ‡πÉ‡∏ä‡πâ UTC ‡πÄ‡∏õ‡πá‡∏ô fallback
		// UTC ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÇ‡∏•‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ UTC ‡∏≠‡∏¢‡∏π‡πà 7 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (UTC+7)
	}

	today := time.Now().In(loc).Format("2006-01-02")

	pipeline := mongo.Pipeline{
		{{Key: "$match", Value: filter}},

		{{Key: "$lookup", Value: bson.D{
			{Key: "from", Value: "Program_Items"},
			{Key: "localField", Value: "_id"},
			{Key: "foreignField", Value: "programId"},
			{Key: "as", Value: "programItems"},
		}}},
	}

	// set programItems into another field
	pipeline = append(pipeline, bson.D{{Key: "$set", Value: bson.D{
		{Key: "fullProgramItems", Value: "$programItems"},
	}},
	})

	// ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á majors
	if len(majors) > 0 && majors[0] != "" {
		pipeline = append(pipeline, bson.D{{Key: "$match", Value: bson.D{
			{Key: "programItems.majors", Value: bson.D{{Key: "$in", Value: majors}}},
		}}})
	}

	// ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á studentYears
	if len(studentYears) > 0 && studentYears[0] != 0 {
		pipeline = append(pipeline, bson.D{{Key: "$match", Value: bson.D{
			{Key: "programItems.studentYears", Value: bson.D{{Key: "$in", Value: studentYears}}},
		}}})
	}

	// ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏∏‡∏î
	if sortField == "dates" {

		pipeline = append(pipeline,
			// Unwind programItems
			bson.D{{Key: "$unwind", Value: bson.D{
				{Key: "path", Value: "$programItems"},
				{Key: "preserveNullAndEmptyArrays", Value: true},
			}}},
			// Unwind programItems.dates
			bson.D{{Key: "$unwind", Value: bson.D{
				{Key: "path", Value: "$programItems.dates"},
				{Key: "preserveNullAndEmptyArrays", Value: true},
			}}})

		// Match ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡∏Ç‡∏≠‡∏á open close program
		if isSortNearest {
			pipeline = append(pipeline, bson.D{{Key: "$match", Value: bson.D{
				{Key: "programItems.dates.date", Value: bson.D{{Key: "$gte", Value: today}}},
			}}})
		}
		// Group ‡πÄ‡∏≠‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠ program
		pipeline = append(pipeline, bson.D{{Key: "$group", Value: bson.D{
			{Key: "_id", Value: "$_id"},
			{Key: "nextDate", Value: bson.D{{Key: "$min", Value: "$programItems.dates.date"}}}, // nextDate ‡∏Ñ‡∏∑‡∏≠ array ‡∏Ç‡∏≠‡∏á
			{Key: "name", Value: bson.D{{Key: "$first", Value: "$name"}}},
			{Key: "type", Value: bson.D{{Key: "$first", Value: "$type"}}},
			{Key: "programState", Value: bson.D{{Key: "$first", Value: "$programState"}}},
			{Key: "skill", Value: bson.D{{Key: "$first", Value: "$skill"}}},
			{Key: "file", Value: bson.D{{Key: "$first", Value: "$file"}}},
			{Key: "programItems", Value: bson.D{{Key: "$first", Value: "$fullProgramItems"}}},
		}}},

			// Sort nextDate
			bson.D{{Key: "$sort", Value: bson.D{{Key: "nextDate", Value: sortOrder}}}},
		)
	} else if sortField != "" {
		fmt.Println("sortField", sortField)
		fmt.Println("sortOrder", sortOrder)
		pipeline = append(pipeline,
			bson.D{{Key: "$sort", Value: bson.D{{Key: sortField, Value: sortOrder}}}},
		)
	}

	// ‚úÖ pagination
	if skip > 0 {
		pipeline = append(pipeline, bson.D{{Key: "$skip", Value: skip}})
	}
	if limit > 0 {
		pipeline = append(pipeline, bson.D{{Key: "$limit", Value: limit}})
	}

	return pipeline
}

func GetOneProgramPipeline(programID primitive.ObjectID) mongo.Pipeline {
	return mongo.Pipeline{
		// 1Ô∏è‚É£ Match ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Program ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
		{{
			Key: "$match", Value: bson.D{
				{Key: "_id", Value: programID},
			},
		}},

		// üîó Lookup ProgramItems ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
		{{Key: "$lookup", Value: bson.D{
			{Key: "from", Value: "Program_Items"},
			{Key: "localField", Value: "_id"},
			{Key: "foreignField", Value: "programId"},
			{Key: "as", Value: "programItems"},
		}}},
	}
}

func GetProgramStatisticsPipeline(programID primitive.ObjectID) mongo.Pipeline {
	return mongo.Pipeline{
		// 1Ô∏è‚É£ Match ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ProgramItems ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
		{{
			Key: "$match", Value: bson.M{
				"programId": programID,
			},
		}},

		// 2Ô∏è‚É£ Lookup Enrollments ‡∏à‡∏≤‡∏Å collection enrollments
		{{
			Key: "$lookup", Value: bson.D{
				{Key: "from", Value: "Enrollments"},
				{Key: "localField", Value: "_id"},
				{Key: "foreignField", Value: "programItemId"},
				{Key: "as", Value: "enrollments"},
			},
		}},

		// 3Ô∏è‚É£ Unwind Enrollments
		{{
			Key: "$unwind", Value: bson.D{
				{Key: "path", Value: "$enrollments"},
				{Key: "preserveNullAndEmptyArrays", Value: true},
			},
		}},

		// 4Ô∏è‚É£ Lookup Students
		{{
			Key: "$lookup", Value: bson.D{
				{Key: "from", Value: "Students"},
				{Key: "localField", Value: "enrollments.studentId"},
				{Key: "foreignField", Value: "_id"},
				{Key: "as", Value: "student"},
			},
		}},

		// 5Ô∏è‚É£ Unwind Students
		{{
			Key: "$unwind", Value: bson.D{
				{Key: "path", Value: "$student"},
				{Key: "preserveNullAndEmptyArrays", Value: true},
			},
		}},

		// 6Ô∏è‚É£ Group ‡∏ï‡∏≤‡∏° ProgramItem ‡πÅ‡∏•‡∏∞ Major
		{{
			Key: "$group", Value: bson.D{
				{Key: "_id", Value: bson.D{
					{Key: "programItemId", Value: "$_id"},
					{Key: "majorName", Value: "$student.major"},
				}},
				{Key: "programItemName", Value: bson.D{{Key: "$first", Value: "$name"}}},
				{Key: "count", Value: bson.D{{Key: "$sum", Value: 1}}},
				{Key: "maxParticipants", Value: bson.D{{Key: "$first", Value: "$maxParticipants"}}},
			},
		}},

		// 9Ô∏è‚É£ Group ProgramItemSums
		{{
			Key: "$group", Value: bson.D{
				{Key: "_id", Value: "$_id.programItemId"},
				{Key: "programItemName", Value: bson.D{{Key: "$first", Value: "$programItemName"}}},
				{Key: "maxParticipants", Value: bson.D{{Key: "$first", Value: "$maxParticipants"}}},
				{Key: "totalRegistered", Value: bson.D{{Key: "$sum", Value: "$count"}}},
				{Key: "registeredByMajor", Value: bson.D{{
					Key: "$push", Value: bson.D{
						{Key: "majorName", Value: "$_id.majorName"},
						{Key: "count", Value: "$count"},
					},
				}}},
			},
		}},

		// üîü Group Final Result
		{{
			Key: "$group", Value: bson.D{
				{Key: "_id", Value: nil},
				{Key: "maxParticipants", Value: bson.D{{Key: "$sum", Value: "$maxParticipants"}}},
				{Key: "totalRegistered", Value: bson.D{{Key: "$sum", Value: "$totalRegistered"}}},
				{Key: "programItemSums", Value: bson.D{{Key: "$push", Value: bson.D{
					{Key: "programItemName", Value: "$programItemName"},
					{Key: "registeredByMajor", Value: "$registeredByMajor"},
				}}}},
			},
		}},

		// 11Ô∏è‚É£ Add field remainingSlots
		{{
			Key: "$addFields", Value: bson.D{
				{Key: "remainingSlots", Value: bson.D{{Key: "$subtract", Value: bson.A{"$maxParticipants", "$totalRegistered"}}}},
			},
		}},

		// 12Ô∏è‚É£ Project Final Output
		{{
			Key: "$project", Value: bson.D{
				{Key: "_id", Value: 0},
				{Key: "maxParticipants", Value: 1},
				{Key: "totalRegistered", Value: 1},
				{Key: "remainingSlots", Value: 1},
				{Key: "programItemSums", Value: 1},
			},
		}},
	}
}
func GetProgramItemIDsByProgramID(ctx context.Context, programID primitive.ObjectID) ([]primitive.ObjectID, error) {
	var programItems []models.ProgramItem
	filter := bson.M{"programId": programID}
	cursor, err := DB.ProgramItemCollection.Find(ctx, filter)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	if err = cursor.All(ctx, &programItems); err != nil {
		return nil, err
	}

	var programItemIDs []primitive.ObjectID
	for _, item := range programItems {
		programItemIDs = append(programItemIDs, item.ID)
	}

	return programItemIDs, nil
}

func GetProgramsPipeline(filter bson.M, sortField string, sortOrder int, skip int64, limit int64, majors []string, studentYears []int) mongo.Pipeline {
	pipeline := mongo.Pipeline{
		// üîç Match ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Program ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
		{{Key: "$match", Value: filter}},

		// üîó Lookup ProgramItems ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
		{{Key: "$lookup", Value: bson.D{
			{Key: "from", Value: "Program_Items"},
			{Key: "localField", Value: "_id"},
			{Key: "foreignField", Value: "programId"},
			{Key: "as", Value: "programItems"},
		}}},

		// üî• Unwind ProgramItems ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏î‡πâ
		{{Key: "$unwind", Value: bson.D{
			{Key: "path", Value: "$programItems"},
			{Key: "preserveNullAndEmptyArrays", Value: true},
		}}},

		// 3Ô∏è‚É£ Lookup EnrollmentCount ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á array
		{{Key: "$lookup", Value: bson.D{
			{Key: "from", Value: "Enrollments"},
			{Key: "let", Value: bson.D{{Key: "itemId", Value: "$programItems._id"}}}, // let ‡∏Ñ‡∏∑‡∏≠ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô pipeline
			{Key: "pipeline", Value: bson.A{
				bson.D{{Key: "$match", Value: bson.D{
					{Key: "$expr", Value: bson.D{ // ‡πÉ‡∏ä‡πâ $expr ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏ô let
						{Key: "$eq", Value: bson.A{"$programItemId", "$$itemId"}},
					}},
				}}},
				bson.D{{Key: "$count", Value: "count"}},
			}},
			{Key: "as", Value: "programItems.enrollmentCountData"},
		}}},

		// 4Ô∏è‚É£ Add enrollmentCount field ‡∏à‡∏≤‡∏Å enrollmentCountData
		{{Key: "$addFields", Value: bson.D{
			{Key: "programItems.enrollmentCount", Value: bson.D{
				{Key: "$ifNull", Value: bson.A{bson.D{
					{Key: "$arrayElemAt", Value: bson.A{"$programItems.enrollmentCountData.count", 0}},
				}, 0}},
			}},
		}}},
	}

	// ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Major ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ **‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ major**
	if len(majors) > 0 && majors[0] != "" {
		pipeline = append(pipeline, bson.D{
			{Key: "$match", Value: bson.D{
				{Key: "programItems.majors", Value: bson.D{{Key: "$in", Value: majors}}},
			}},
		})
	} else {
		fmt.Println("Skipping majorName filtering")
	}

	// ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ StudentYears ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ **‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ studentYears**
	if len(studentYears) > 0 {
		pipeline = append(pipeline, bson.D{
			{Key: "$match", Value: bson.D{
				{Key: "programItems.studentYears", Value: bson.D{{Key: "$in", Value: studentYears}}},
			}},
		})
	}

	// ‚úÖ Group ProgramItems ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Program
	pipeline = append(pipeline, bson.D{
		{Key: "$group", Value: bson.D{
			{Key: "_id", Value: "$_id"},
			{Key: "name", Value: bson.D{{Key: "$first", Value: "$name"}}},
			{Key: "type", Value: bson.D{{Key: "$first", Value: "$type"}}},
			{Key: "programState", Value: bson.D{{Key: "$first", Value: "$programState"}}},
			{Key: "skill", Value: bson.D{{Key: "$first", Value: "$skill"}}},
			{Key: "file", Value: bson.D{{Key: "$first", Value: "$file"}}},
			{Key: "programItems", Value: bson.D{{Key: "$push", Value: "$programItems"}}}, // ‡πÄ‡∏Å‡πá‡∏ö ProgramItems ‡πÄ‡∏õ‡πá‡∏ô Array
		}},
	})

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° `$sort` ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
	if sortField != "" && (sortOrder == 1 || sortOrder == -1) {
		pipeline = append(pipeline, bson.D{{Key: "$sort", Value: bson.D{{Key: sortField, Value: sortOrder}}}})
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° `$skip` ‡πÅ‡∏•‡∏∞ `$limit` ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
	if skip > 0 {
		pipeline = append(pipeline, bson.D{{Key: "$skip", Value: skip}})
	}
	if limit > 0 {
		pipeline = append(pipeline, bson.D{{Key: "$limit", Value: limit}})
	}

	return pipeline
}

func GetAllProgramCalendarPipeline(startDateStr string, endDateStr string) mongo.Pipeline {
	return mongo.Pipeline{
		{{Key: "$match", Value: bson.M{
			"dates": bson.M{
				"$elemMatch": bson.M{
					"date": bson.M{
						// ‡∏î‡∏∂‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° 6 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞ 6 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á
						"$gte": startDateStr + "-06",
						"$lte": endDateStr + "+06",
					},
				},
			},
		}}},

		// lookup enrollment
		{{Key: "$lookup", Value: bson.M{
			"from": "Enrollments",
			"let":  bson.M{"programItemId": "$_id"},
			"pipeline": mongo.Pipeline{
				{{Key: "$match", Value: bson.M{
					"$expr": bson.M{
						"$eq": bson.A{"$programItemId", "$$programItemId"},
					},
				}}},
				{{Key: "$count", Value: "count"}},
			},
			"as": "enrollments",
		}}},

		// unwind enrollment
		{{Key: "$unwind", Value: bson.M{
			"path":                       "$enrollments",
			"preserveNullAndEmptyArrays": true, // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÅ‡∏™‡∏î‡∏á
		}}},

		{{Key: "$addFields", Value: bson.M{
			"enrollmentCount": bson.M{
				"$ifNull": bson.A{"$enrollments.count", 0}, // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ enrollments ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ 0
			},
		}},
		},

		// Stage C: Group filtered ProgramItems by ProgramID.
		{{Key: "$group", Value: bson.M{
			"_id":          "$programId",
			"programItems": bson.M{"$push": "$$ROOT"}, // $$ROOT now has 'dates' as a correctly filtered array.
		}}},
		// Stage D: Lookup Program details from 'Programs' collection.
		{{Key: "$lookup", Value: bson.M{
			"from":         "Programs",
			"localField":   "_id",
			"foreignField": "_id",
			"as":           "programInfo",
		}}},
		// Stage E: Unwind the Program details.
		{{Key: "$unwind", Value: "$programInfo"}}, // Use {Key: "$unwind", Value: bson.M{"path": "$programInfo", "preserveNullAndEmptyArrays": true}} if you want to keep programs that might not have items after filtering, or items whose programId doesn't match an program.

		// ‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏™‡∏±‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏¢‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢ performance ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ ‡πÄ‡∏•‡∏¢‡πÉ‡∏ä‡πâ $project ‡πÅ‡∏ó‡∏ô
		// {{Key: "$replaceRoot", Value: bson.M{
		// 	"newRoot": bson.M{
		// 		"$mergeObjects": bson.A{"$programInfo", bson.M{"programItems": "$programItems"}},
		// 	},
		// }}},

		{{Key: "$project", Value: bson.M{
			"id":              "$_id", // Exclude the default _id field
			"name":            "$programInfo.name",
			"type":            "$programInfo.type",
			"programState":    "$programInfo.programState",
			"skill":           "$programInfo.skill",
			"foodVotes":       "$programInfo.foodVotes",
			"file":            "$programInfo.file",
			"endDateEnroll":   "$programInfo.endDateEnroll",
			"programItems":    "$programItems",
			"enrollmentCount": "$enrollmentCount",
		}}},
	}

}
