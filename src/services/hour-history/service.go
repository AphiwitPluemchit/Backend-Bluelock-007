package hourhistory

import (
	DB "Backend-Bluelock-007/src/database"
	"Backend-Bluelock-007/src/models"
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// ========================================
// Core Function - ‡∏™‡∏£‡πâ‡∏≤‡∏á HourChangeHistory
// ========================================

// SaveHourHistory ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
func SaveHourHistory(
	ctx context.Context,
	studentID primitive.ObjectID,
	skillType string, // "soft" | "hard"
	hourChange int, // ‡∏ö‡∏ß‡∏Å = ‡πÄ‡∏û‡∏¥‡πà‡∏°, ‡∏•‡∏ö = ‡∏•‡∏î
	title string,
	remark string,
	sourceType string, // "program" | "certificate"
	sourceID primitive.ObjectID,
	enrollmentID *primitive.ObjectID, // optional, ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö program ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
) error {
	history := models.HourChangeHistory{
		ID:           primitive.NewObjectID(),
		SkillType:    skillType,
		HourChange:   hourChange,
		Remark:       remark,
		ChangeAt:     time.Now(),
		Title:        title,
		StudentID:    studentID,
		EnrollmentID: enrollmentID,
		SourceType:   sourceType,
		SourceID:     sourceID,
	}

	if _, err := DB.HourChangeHistoryCollection.InsertOne(ctx, history); err != nil {
		return fmt.Errorf("failed to save hour change history: %v", err)
	}

	return nil
}

// CreateHourChangeHistory ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å HourChangeHistory ‡∏û‡∏£‡πâ‡∏≠‡∏° status
func CreateHourChangeHistory(
	ctx context.Context,
	studentID primitive.ObjectID,
	enrollmentID *primitive.ObjectID,
	sourceType string,
	sourceID primitive.ObjectID,
	skillType string,
	status string,
	hourChange int,
	title string,
	remark string,
) (*models.HourChangeHistory, error) {
	history := models.HourChangeHistory{
		ID:           primitive.NewObjectID(),
		SourceType:   sourceType,
		SourceID:     sourceID,
		SkillType:    skillType,
		Status:       status,
		HourChange:   hourChange,
		Remark:       remark,
		ChangeAt:     time.Now(),
		Title:        title,
		StudentID:    studentID,
		EnrollmentID: enrollmentID,
	}

	_, err := DB.HourChangeHistoryCollection.InsertOne(ctx, history)
	if err != nil {
		return nil, fmt.Errorf("failed to create hour change history: %v", err)
	}

	return &history, nil
}

// ========================================
// Program-specific Functions
// ========================================

// RecordEnrollmentHourChange ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ï‡∏≠‡∏ô Enroll (‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà)
// status: HCStatusUpcoming (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≤‡∏ñ‡∏∂‡∏á - ‡∏£‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°)
func RecordEnrollmentHourChange(
	ctx context.Context,
	studentID primitive.ObjectID,
	enrollmentID primitive.ObjectID,
	programID primitive.ObjectID,
	programName string,
	skillType string,
	expectedHours int,
) error {
	// ‡∏™‡∏£‡πâ‡∏≤‡∏á record ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≠‡∏ô enroll
	_, err := CreateHourChangeHistory(
		ctx,
		studentID,
		&enrollmentID,
		"program",
		programID,
		skillType,
		models.HCStatusUpcoming, // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≤‡∏ñ‡∏∂‡∏á - ‡∏£‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
		expectedHours,
		programName,
		"‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≤‡∏ñ‡∏∂‡∏á)",
	)
	return err
}

// UpdateCheckinHourChange - DEPRECATED: ‡πÉ‡∏ä‡πâ RecordCheckinActivity ‡πÅ‡∏ó‡∏ô
// ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility
func UpdateCheckinHourChange(
	ctx context.Context,
	enrollmentID primitive.ObjectID,
	checkinDate string,
) error {
	return RecordCheckinActivity(ctx, enrollmentID, checkinDate)
}

// RecordCheckinActivity ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô)
// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô status: HCStatusUpcoming ‚Üí HCStatusParticipating (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°)
func RecordCheckinActivity(
	ctx context.Context,
	enrollmentID primitive.ObjectID,
	checkinDate string,
) error {
	filter := bson.M{
		"enrollmentId": enrollmentID,
		"status":       models.HCStatusUpcoming,
		"sourceType":   "program",
	}

	update := bson.M{
		"$set": bson.M{
			"status":     models.HCStatusParticipating,
			"hourChange": 0, // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
			"remark":     fmt.Sprintf("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà %s", checkinDate),
			"changeAt":   time.Now(),
		},
	}

	result, err := DB.HourChangeHistoryCollection.UpdateOne(ctx, filter, update)
	if err != nil {
		return fmt.Errorf("failed to record checkin activity: %v", err)
	}

	if result.MatchedCount == 0 {
		return fmt.Errorf("no upcoming hour change record found for enrollmentId: %s", enrollmentID.Hex())
	}

	return nil
}

// UpdateCheckinToVerifying ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility
// ‚ö†Ô∏è DEPRECATED: ‡πÉ‡∏ä‡πâ RecordCheckinActivity ‡πÅ‡∏ó‡∏ô
func UpdateCheckinToVerifying(
	ctx context.Context,
	enrollmentID primitive.ObjectID,
	checkinDate string,
) error {
	return RecordCheckinActivity(ctx, enrollmentID, checkinDate)
}

// ‚ö†Ô∏è DEPRECATED: Functions ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å logic ‡πÉ‡∏´‡∏°‡πà
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ï‡∏≠‡∏ô program success (complete) ‡πÅ‡∏ó‡∏ô (‡πÉ‡∏ô VerifyAndGrantHours)

// VerifyAndGrantHours ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (trigger ‡πÄ‡∏°‡∏∑‡πà‡∏≠ program success/complete)
// Logic ‡πÉ‡∏´‡∏°‡πà:
// - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ check-in/out ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ï‡∏≤‡∏° programItem.Dates ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
// - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤ check-in ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (¬±30 ‡∏ô‡∏≤‡∏ó‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
// - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô + ‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô = attended + ‡πÑ‡∏î‡πâ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏ï‡πá‡∏°
// - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏™‡∏≤‡∏¢ = attended + 0 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
// - ‡πÑ‡∏°‡πà‡∏°‡∏≤‡πÄ‡∏•‡∏¢ = absent + 0 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
func VerifyAndGrantHours(
	ctx context.Context,
	enrollmentID primitive.ObjectID,
) error {
	loc, _ := time.LoadLocation("Asia/Bangkok")

	// 1) ‡∏î‡∏∂‡∏á Enrollment
	var enrollment models.Enrollment
	err := DB.EnrollmentCollection.FindOne(ctx, bson.M{"_id": enrollmentID}).Decode(&enrollment)
	if err != nil {
		return fmt.Errorf("enrollment not found: %v", err)
	}

	// 2) ‡∏î‡∏∂‡∏á ProgramItem ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	var programItem models.ProgramItem
	err = DB.ProgramItemCollection.FindOne(ctx, bson.M{"_id": enrollment.ProgramItemID}).Decode(&programItem)
	if err != nil {
		return fmt.Errorf("program item not found: %v", err)
	}

	totalDays := len(programItem.Dates)
	if totalDays == 0 {
		return fmt.Errorf("program item has no dates")
	}

	// 3) ‡∏´‡∏≤ HourChangeHistory record
	var hourRecord models.HourChangeHistory
	err = DB.HourChangeHistoryCollection.FindOne(ctx, bson.M{
		"enrollmentId": enrollmentID,
		"sourceType":   "program",
		"sourceId":     enrollment.ProgramID,
	}).Decode(&hourRecord)

	if err != nil {
		// ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ record ‚Üí skip
		log.Printf("‚ö†Ô∏è No hour record found for enrollment %s", enrollmentID.Hex())
		return nil
	}

	// 4) ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏Ç‡∏≠‡∏á checkin/checkout records ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
	checkinoutMap := make(map[string]models.CheckinoutRecord)
	if enrollment.CheckinoutRecord != nil {
		for _, record := range *enrollment.CheckinoutRecord {
			var dateKey string
			if record.Checkin != nil {
				dateKey = record.Checkin.In(loc).Format("2006-01-02")
			} else if record.Checkout != nil {
				dateKey = record.Checkout.In(loc).Format("2006-01-02")
			}
			if dateKey != "" {
				checkinoutMap[dateKey] = record
			}
		}
	}

	// 5) ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡πÉ‡∏ô programItem.Dates
	daysOnTime := 0     // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤ check-in/out ‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤
	daysLate := 0       // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤ check-in/out ‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏¢
	daysIncomplete := 0 // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πà checkin ‡∏´‡∏£‡∏∑‡∏≠ checkout ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
	daysAbsent := 0     // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏≤

	missingDates := []string{}    // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏≤‡πÄ‡∏•‡∏¢
	lateDates := []string{}       // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏¢
	incompleteDates := []string{} // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö

	log.Printf("üîç [DEBUG] Enrollment %s - Starting verification for %d days", enrollmentID.Hex(), totalDays)
	log.Printf("üîç [DEBUG] Total checkinout records: %d", len(checkinoutMap))

	for idx, programDate := range programItem.Dates {
		dateKey := programDate.Date
		record, hasRecord := checkinoutMap[dateKey]

		log.Printf("üîç [DEBUG] Day %d/%d - Date: %s", idx+1, totalDays, dateKey)
		log.Printf("üîç [DEBUG]   ‚îú‚îÄ Activity Time: %s - %s", programDate.Stime, programDate.Etime)

		if !hasRecord || (record.Checkin == nil && record.Checkout == nil) {
			// ‡πÑ‡∏°‡πà‡∏°‡∏≤ check-in/out ‡πÄ‡∏•‡∏¢
			log.Printf("üîç [DEBUG]   ‚îî‚îÄ ‚ùå ABSENT - No check-in/out record")
			daysAbsent++
			missingDates = append(missingDates, dateKey)
			continue
		}

		// ‡∏°‡∏µ record ‡πÅ‡∏•‡πâ‡∏ß - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ
		checkinStr := "N/A"
		checkoutStr := "N/A"
		if record.Checkin != nil {
			checkinStr = record.Checkin.In(loc).Format("15:04:05")
		}
		if record.Checkout != nil {
			checkoutStr = record.Checkout.In(loc).Format("15:04:05")
		}
		log.Printf("üîç [DEBUG]   ‚îú‚îÄ Check-in: %s, Check-out: %s", checkinStr, checkoutStr)

		// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á checkin ‡πÅ‡∏•‡∏∞ checkout ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
		if record.Checkin == nil || record.Checkout == nil {
			// ‡∏°‡∏µ‡πÅ‡∏ï‡πà checkin ‡∏´‡∏£‡∏∑‡∏≠ checkout ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
			log.Printf("üîç [DEBUG]   ‚îî‚îÄ ‚ö†Ô∏è INCOMPLETE - Missing check-in or check-out")
			daysIncomplete++
			incompleteDates = append(incompleteDates, dateKey)
			continue
		}

		// ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á checkin ‡πÅ‡∏•‡∏∞ checkout ‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤
		if programDate.Stime != "" {
			// Parse ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
			startTime, err := time.ParseInLocation("2006-01-02 15:04", programDate.Date+" "+programDate.Stime, loc)
			if err == nil {
				// ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 30 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 30 ‡∏ô‡∏≤‡∏ó‡∏µ
				earlyLimit := startTime.Add(-30 * time.Minute)
				lateLimit := startTime.Add(30 * time.Minute)
				checkinTime := record.Checkin.In(loc)

				log.Printf("üîç [DEBUG]   ‚îú‚îÄ Activity Start: %s", startTime.Format("15:04:05"))
				log.Printf("üîç [DEBUG]   ‚îú‚îÄ Allowed Range: %s - %s (¬±30 min)", earlyLimit.Format("15:04:05"), lateLimit.Format("15:04:05"))
				log.Printf("üîç [DEBUG]   ‚îú‚îÄ Actual Check-in: %s", checkinTime.Format("15:04:05"))

				if (checkinTime.Equal(earlyLimit) || checkinTime.After(earlyLimit)) &&
					(checkinTime.Before(lateLimit) || checkinTime.Equal(lateLimit)) {
					// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (¬±30 ‡∏ô‡∏≤‡∏ó‡∏µ)
					log.Printf("üîç [DEBUG]   ‚îî‚îÄ ‚úÖ ON TIME - Within allowed range")
					daysOnTime++
				} else {
					// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏™‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô)
					if checkinTime.Before(earlyLimit) {
						diff := earlyLimit.Sub(checkinTime)
						log.Printf("üîç [DEBUG]   ‚îî‚îÄ ‚ö†Ô∏è TOO EARLY - %d minutes before allowed time", int(diff.Minutes()))
					} else {
						diff := checkinTime.Sub(lateLimit)
						log.Printf("üîç [DEBUG]   ‚îî‚îÄ ‚ö†Ô∏è TOO LATE - %d minutes after allowed time", int(diff.Minutes()))
					}
					daysLate++
					lateDates = append(lateDates, dateKey)
				}
			} else {
				// ‡∏ñ‡πâ‡∏≤ parse ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏°‡∏≤ (‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢)
				log.Printf("üîç [DEBUG]   ‚îî‚îÄ ‚úÖ ON TIME - No time specified or parse error")
				daysOnTime++
			}
		} else {
			// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏°‡∏≤
			log.Printf("üîç [DEBUG]   ‚îî‚îÄ ‚úÖ ON TIME - No specific time required")
			daysOnTime++
		}
	}

	totalValidDays := daysOnTime + daysLate + daysIncomplete
	hasAttendedAllDays := (daysOnTime == totalDays) // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô

	log.Printf("üîç [DEBUG] Summary:")
	log.Printf("üîç [DEBUG]   ‚îú‚îÄ Total Days Required: %d", totalDays)
	log.Printf("üîç [DEBUG]   ‚îú‚îÄ Days On Time: %d", daysOnTime)
	log.Printf("üîç [DEBUG]   ‚îú‚îÄ Days Late: %d", daysLate)
	log.Printf("üîç [DEBUG]   ‚îú‚îÄ Days Incomplete: %d", daysIncomplete)
	log.Printf("üîç [DEBUG]   ‚îú‚îÄ Days Absent: %d", daysAbsent)
	log.Printf("üîç [DEBUG]   ‚îî‚îÄ Has Attended All Days: %v", hasAttendedAllDays)

	var newStatus string
	var newHourChange int
	var newRemark string

	// 6) Logic ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
	if daysAbsent == totalDays {
		// ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏•‡∏¢‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
		newStatus = models.HCStatusAbsent
		newHourChange = -*programItem.Hour
		newRemark = fmt.Sprintf("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏•‡∏¢ (0/%d ‡∏ß‡∏±‡∏ô)", totalDays)
	} else if hasAttendedAllDays {
		// ‚úÖ ‡∏°‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡∏∞ ‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‚Üí ‡πÑ‡∏î‡πâ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏ï‡πá‡∏°
		newStatus = models.HCStatusAttended
		newHourChange = *programItem.Hour
		newRemark = fmt.Sprintf("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô (%d/%d ‡∏ß‡∏±‡∏ô) - ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö %d ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", daysOnTime, totalDays, newHourChange)
	} else {
		// ‚ö†Ô∏è ‡∏°‡∏≤‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏™‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‚Üí attended ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
		newStatus = models.HCStatusAttended
		newHourChange = 0

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á remark ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
		details := []string{}
		if daysOnTime > 0 {
			details = append(details, fmt.Sprintf("‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤ %d ‡∏ß‡∏±‡∏ô", daysOnTime))
		}
		if daysLate > 0 {
			details = append(details, fmt.Sprintf("‡∏™‡∏≤‡∏¢ %d ‡∏ß‡∏±‡∏ô", daysLate))
		}
		if daysIncomplete > 0 {
			details = append(details, fmt.Sprintf("‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö %d ‡∏ß‡∏±‡∏ô", daysIncomplete))
		}
		if daysAbsent > 0 {
			details = append(details, fmt.Sprintf("‡∏Ç‡∏≤‡∏î %d ‡∏ß‡∏±‡∏ô", daysAbsent))
		}

		detailsStr := ""
		if len(details) > 0 {
			detailsStr = " (" + joinStrings(details, ", ") + ")"
		}

		newRemark = fmt.Sprintf("‚ö†Ô∏è ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° %d/%d ‡∏ß‡∏±‡∏ô%s - ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", totalValidDays, totalDays, detailsStr)

		// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
		if len(missingDates) > 0 && len(missingDates) <= 3 {
			newRemark += fmt.Sprintf(" | ‡∏Ç‡∏≤‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: %s", joinStrings(missingDates, ", "))
		}
		if len(lateDates) > 0 && len(lateDates) <= 3 {
			newRemark += fmt.Sprintf(" | ‡∏™‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: %s", joinStrings(lateDates, ", "))
		}
		if len(incompleteDates) > 0 && len(incompleteDates) <= 3 {
			newRemark += fmt.Sprintf(" | ‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: %s", joinStrings(incompleteDates, ", "))
		}
	}

	// 7) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï HourChangeHistory
	filter := bson.M{
		"enrollmentId": enrollmentID,
		"sourceType":   "program",
		"sourceId":     enrollment.ProgramID,
	}

	update := bson.M{
		"$set": bson.M{
			"status":     newStatus,
			"hourChange": newHourChange,
			"remark":     newRemark,
			"changeAt":   time.Now(),
		},
	}

	log.Printf("ÔøΩ [DEBUG] Final Decision:")
	log.Printf("üîç [DEBUG]   ‚îú‚îÄ Status: %s", newStatus)
	log.Printf("üîç [DEBUG]   ‚îú‚îÄ Hours Granted: %d", newHourChange)
	log.Printf("üîç [DEBUG]   ‚îî‚îÄ Remark: %s", newRemark)
	log.Printf("üìù Updating hour change history for enrollment %s: status=%s, hours=%d",
		enrollmentID.Hex(), newStatus, newHourChange)

	_, err = DB.HourChangeHistoryCollection.UpdateOne(ctx, filter, update)
	if err != nil {
		return fmt.Errorf("failed to verify and grant hours: %v", err)
	}

	// üîÑ Update student status ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
	if err := updateStudentStatus(ctx, enrollment.StudentID); err != nil {
		log.Printf("‚ö†Ô∏è Warning: Failed to update student status for %s: %v", enrollment.StudentID.Hex(), err)
		// ‡πÑ‡∏°‡πà return error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà status
	}

	return nil
}

// joinStrings ‡∏£‡∏ß‡∏° string slice ‡∏î‡πâ‡∏ß‡∏¢ separator
func joinStrings(arr []string, sep string) string {
	if len(arr) == 0 {
		return ""
	}
	result := arr[0]
	for i := 1; i < len(arr); i++ {
		result += sep + arr[i]
	}
	return result
}

// ProcessEnrollmentsForCompletedProgram processes all enrollments for a program
// that has been marked as complete. This is an exported helper so other
// packages (jobs, programs service, admin handlers) can call the same logic
// used by the background worker.
func ProcessEnrollmentsForCompletedProgram(ctx context.Context, programID primitive.ObjectID) error {
	log.Println("üìù Processing enrollments for completed program (hour-history): ++++++++++++++++", programID.Hex())

	// 2) ‡∏´‡∏≤ ProgramItems ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á program ‡∏ô‡∏µ‡πâ
	cursor, err := DB.ProgramItemCollection.Find(ctx, bson.M{"programId": programID})
	if err != nil {
		return err
	}
	defer cursor.Close(ctx)

	var programItemIDs []primitive.ObjectID
	for cursor.Next(ctx) {
		var item struct {
			ID primitive.ObjectID `bson:"_id"`
		}
		if err := cursor.Decode(&item); err != nil {
			continue
		}
		programItemIDs = append(programItemIDs, item.ID)
	}

	// 3) ‡∏´‡∏≤ Enrollments ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
	enrollCursor, err := DB.EnrollmentCollection.Find(ctx, bson.M{
		"programId":     programID,
		"programItemId": bson.M{"$in": programItemIDs},
	})
	if err != nil {
		return err
	}
	defer enrollCursor.Close(ctx)

	// 4) ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ enrollment
	successCount := 0
	errorCount := 0

	for enrollCursor.Next(ctx) {
		var enrollment struct {
			ID primitive.ObjectID `bson:"_id"`
		}
		if err := enrollCursor.Decode(&enrollment); err != nil {
			log.Printf("‚ö†Ô∏è Failed to decode enrollment: %v", err)
			errorCount++
			continue
		}

		// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡πÉ‡∏ä‡πâ VerifyAndGrantHours ‡πÉ‡∏ô‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ô‡∏µ‡πâ)
		if err := VerifyAndGrantHours(ctx, enrollment.ID); err != nil {
			log.Printf("‚ö†Ô∏è Failed to verify hours for enrollment %s: %v", enrollment.ID.Hex(), err)
			errorCount++
		} else {
			successCount++
		}
	}

	// log.Printf("‚úÖ Processed %d enrollments successfully, %d errors", successCount, errorCount)
	return nil
}

// ========================================
// Query Functions
// ========================================

// GetHistoryByStudent ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏™‡∏¥‡∏ï
func GetHistoryByStudent(ctx context.Context, studentID primitive.ObjectID) ([]models.HourChangeHistory, error) {
	cursor, err := DB.HourChangeHistoryCollection.Find(ctx, bson.M{"studentId": studentID})
	if err != nil {
		return nil, fmt.Errorf("failed to get hour history: %v", err)
	}
	defer cursor.Close(ctx)

	var histories []models.HourChangeHistory
	if err := cursor.All(ctx, &histories); err != nil {
		return nil, fmt.Errorf("failed to decode hour history: %v", err)
	}

	return histories, nil
}

// GetHistoryBySource ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ï‡∏≤‡∏° source (program/certificate)
func GetHistoryBySource(ctx context.Context, sourceType string, sourceID primitive.ObjectID) ([]models.HourChangeHistory, error) {
	cursor, err := DB.HourChangeHistoryCollection.Find(ctx, bson.M{
		"sourceType": sourceType,
		"sourceId":   sourceID,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to get hour history: %v", err)
	}
	defer cursor.Close(ctx)

	var histories []models.HourChangeHistory
	if err := cursor.All(ctx, &histories); err != nil {
		return nil, fmt.Errorf("failed to decode hour history: %v", err)
	}

	return histories, nil
}

// GetHistoryByProgram ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏° limit
func GetHistoryByProgram(ctx context.Context, programID primitive.ObjectID, limit int) ([]models.HourChangeHistory, error) {
	filter := bson.M{"sourceType": "program", "sourceId": programID}
	opts := options.Find().SetSort(bson.D{{Key: "changeAt", Value: -1}})

	if limit > 0 {
		opts.SetLimit(int64(limit))
	}

	cursor, err := DB.HourChangeHistoryCollection.Find(ctx, filter, opts)
	if err != nil {
		return nil, fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÑ‡∏î‡πâ: %v", err)
	}
	defer cursor.Close(ctx)

	var histories []models.HourChangeHistory
	if err := cursor.All(ctx, &histories); err != nil {
		return nil, fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÑ‡∏î‡πâ: %v", err)
	}

	return histories, nil
}

// GetHistorySummary ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
func GetHistorySummary(ctx context.Context, studentID primitive.ObjectID) (map[string]interface{}, error) {
	pipeline := []bson.M{
		{"$match": bson.M{"studentId": studentID}},
		{"$group": bson.M{
			"_id":        "$status",
			"count":      bson.M{"$sum": 1},
			"totalHours": bson.M{"$sum": "$hourChange"},
		}},
	}

	cursor, err := DB.HourChangeHistoryCollection.Aggregate(ctx, pipeline)
	if err != nil {
		return nil, fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÑ‡∏î‡πâ: %v", err)
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		return nil, fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÑ‡∏î‡πâ: %v", err)
	}

	summary := map[string]interface{}{
		"totalRecords":       0,
		"totalAttended":      0,
		"totalUpcoming":      0,
		"totalParticipating": 0,
		"totalAbsent":        0,
	}

	for _, result := range results {
		status, _ := result["_id"].(string)
		count, _ := result["count"].(int32)
		totalHours, _ := result["totalHours"].(int32)

		summary["totalRecords"] = summary["totalRecords"].(int) + int(count)

		switch status {
		case models.HCStatusAttended:
			summary["totalAttended"] = int(totalHours)
		case models.HCStatusUpcoming:
			summary["totalUpcoming"] = int(count)
		case models.HCStatusParticipating:
			summary["totalParticipating"] = int(count)
		case models.HCStatusAbsent:
			summary["totalAbsent"] = int(count)
		}
	}

	return summary, nil
}

// GetHistoryWithFilters ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° filters
func GetHistoryWithFilters(
	ctx context.Context,
	studentID *primitive.ObjectID,
	sourceType string,
	statuses []string,
	searchTitle string,
	limit int,
	skip int,
) ([]models.HourChangeHistory, int64, error) {
	// ‡∏™‡∏£‡πâ‡∏≤‡∏á filter query
	filter := bson.M{}

	// Filter by studentID (optional)
	if studentID != nil {
		filter["studentId"] = *studentID
	}

	// Filter by sourceType (optional)
	if sourceType != "" {
		filter["sourceType"] = sourceType
	}

	// Filter by multiple statuses (optional)
	if len(statuses) > 0 {
		filter["status"] = bson.M{"$in": statuses}
	}

	// Search by title (optional, case-insensitive)
	if searchTitle != "" {
		filter["title"] = bson.M{"$regex": primitive.Regex{Pattern: searchTitle, Options: "i"}}
	}

	// Count total documents matching filter
	totalCount, err := DB.HourChangeHistoryCollection.CountDocuments(ctx, filter)
	if err != nil {
		return nil, 0, fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ: %v", err)
	}

	// Set options for pagination and sorting
	opts := options.Find().
		SetSort(bson.D{{Key: "changeAt", Value: -1}}).
		SetSkip(int64(skip))

	if limit > 0 {
		opts.SetLimit(int64(limit))
	}

	// Execute query
	cursor, err := DB.HourChangeHistoryCollection.Find(ctx, filter, opts)
	if err != nil {
		return nil, 0, fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÑ‡∏î‡πâ: %v", err)
	}
	defer cursor.Close(ctx)

	var histories []models.HourChangeHistory
	if err := cursor.All(ctx, &histories); err != nil {
		return nil, 0, fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÑ‡∏î‡πâ: %v", err)
	}

	return histories, totalCount, nil
}

// GetStudentHoursSummary ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏à‡∏≤‡∏Å hour history
// ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á attended (‡∏ö‡∏ß‡∏Å) ‡πÅ‡∏•‡∏∞ absent (‡∏•‡∏ö) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
func GetStudentHoursSummary(ctx context.Context, studentID primitive.ObjectID) (map[string]interface{}, error) {
	// Aggregate pipeline ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ï‡∏≤‡∏° skillType
	// ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á attended ‡πÅ‡∏•‡∏∞ absent (absent ‡∏à‡∏∞‡∏°‡∏µ hourChange ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö)
	pipeline := []bson.M{
		{
			"$match": bson.M{
				"studentId": studentID,
				"status": bson.M{
					"$in": []string{models.HCStatusAttended, models.HCStatusAbsent}, // ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á attended ‡πÅ‡∏•‡∏∞ absent
				},
			},
		},
		{
			"$group": bson.M{
				"_id": "$skillType", // group ‡∏ï‡∏≤‡∏° soft/hard
				"totalHours": bson.M{
					"$sum": "$hourChange", // ‡∏£‡∏ß‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (attended = +, absent = -)
				},
			},
		},
	}

	cursor, err := DB.HourChangeHistoryCollection.Aggregate(ctx, pipeline)
	if err != nil {
		return nil, fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ: %v", err)
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		return nil, fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏î‡πâ: %v", err)
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á summary object
	summary := map[string]interface{}{
		"softSkill": 0,
		"hardSkill": 0,
	}

	// Map ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å aggregation
	for _, result := range results {
		skillType, _ := result["_id"].(string)
		totalHours, _ := result["totalHours"].(int32)

		if skillType == "soft" {
			summary["softSkill"] = int(totalHours)
		} else if skillType == "hard" {
			summary["hardSkill"] = int(totalHours)
		}
	}

	return summary, nil
}

// ========================================
// Student Status Management
// ========================================

// UpdateStudentStatus - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å HourChangeHistory
// Exported ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ packages ‡∏≠‡∏∑‡πà‡∏ô (certificates, students) ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
func UpdateStudentStatus(ctx context.Context, studentID primitive.ObjectID) error {
	// 1) ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• student (‡∏ê‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
	var student models.Student
	if err := DB.StudentCollection.FindOne(ctx, bson.M{"_id": studentID}).Decode(&student); err != nil {
		return fmt.Errorf("student not found: %v", err)
	}

	// 2) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏à‡∏≤‡∏Å HourChangeHistory
	softNet, hardNet, err := CalculateNetHours(ctx, studentID, student.SoftSkill, student.HardSkill)
	if err != nil {
		return err
	}

	// 3) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å "‡∏™‡∏∏‡∏ó‡∏ò‡∏¥"
	newStatus := CalculateStatus(softNet, hardNet)

	// 4) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
	if student.Status != newStatus {
		update := bson.M{"$set": bson.M{"status": newStatus}}
		if _, err := DB.StudentCollection.UpdateOne(ctx, bson.M{"_id": studentID}, update); err != nil {
			return fmt.Errorf("failed to update student status: %v", err)
		}

		log.Printf("‚úÖ [UpdateStudentStatus] %s (%s) base(soft=%d,hard=%d) => net(soft=%d,hard=%d) => status: %d -> %d",
			student.ID.Hex(), student.Name, student.SoftSkill, student.HardSkill, softNet, hardNet, student.Status, newStatus)
	} else {
		log.Printf("‚ÑπÔ∏è [UpdateStudentStatus] %s (%s) status unchanged (status=%d, soft=%d, hard=%d)",
			student.ID.Hex(), student.Name, newStatus, softNet, hardNet)
	}

	return nil
}

// updateStudentStatus - internal wrapper (backward compatibility)
func updateStudentStatus(ctx context.Context, studentID primitive.ObjectID) error {
	return UpdateStudentStatus(ctx, studentID)
}

// CalculateNetHours - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏à‡∏≤‡∏Å base hours + hour history delta
// Exported ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ packages ‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
func CalculateNetHours(ctx context.Context, studentID primitive.ObjectID, baseSoft, baseHard int) (softNet, hardNet int, err error) {
	pipeline := []bson.M{
		{"$match": bson.M{
			"studentId": studentID,
			"status": bson.M{"$in": []string{
				models.HCStatusAttended, models.HCStatusAbsent, models.HCStatusApproved,
			}},
		}},
		{"$addFields": bson.M{
			"deltaHours": bson.M{
				"$switch": bson.M{
					"branches": bson.A{
						bson.M{
							"case": bson.M{"$in": bson.A{"$status", bson.A{models.HCStatusAttended, models.HCStatusApproved}}},
							"then": bson.M{"$abs": bson.M{"$toInt": bson.M{"$ifNull": bson.A{"$hourChange", 0}}}},
						},
						bson.M{
							"case": bson.M{"$eq": bson.A{"$status", models.HCStatusAbsent}},
							"then": bson.M{
								"$multiply": bson.A{
									-1,
									bson.M{"$abs": bson.M{"$toInt": bson.M{"$ifNull": bson.A{"$hourChange", 0}}}},
								},
							},
						},
					},
					"default": 0,
				},
			},
		}},
		{"$group": bson.M{
			"_id":        "$skillType", // "soft" | "hard"
			"totalHours": bson.M{"$sum": "$deltaHours"},
		}},
	}

	cursor, aggErr := DB.HourChangeHistoryCollection.Aggregate(ctx, pipeline)
	if aggErr != nil {
		return 0, 0, fmt.Errorf("aggregate hour deltas error: %v", aggErr)
	}
	defer cursor.Close(ctx)

	type agg struct {
		ID         string `bson:"_id"`
		TotalHours int64  `bson:"totalHours"`
	}
	var aggRows []agg
	if aggErr := cursor.All(ctx, &aggRows); aggErr != nil {
		return 0, 0, fmt.Errorf("aggregate decode error: %v", aggErr)
	}

	// ‡∏ö‡∏ß‡∏Å‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÉ‡∏ô student
	softNet = baseSoft
	hardNet = baseHard
	for _, r := range aggRows {
		switch strings.ToLower(r.ID) {
		case "soft":
			softNet += int(r.TotalHours)
		case "hard":
			hardNet += int(r.TotalHours)
		}
	}

	return softNet, hardNet, nil
}

// CalculateStatus - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á soft skill ‡πÅ‡∏•‡∏∞ hard skill
// Exported ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ packages ‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
func CalculateStatus(softSkill, hardSkill int) int {
	total := softSkill + hardSkill

	switch {
	case softSkill >= 30 && hardSkill >= 12:
		return 3 // ‡∏Ñ‡∏£‡∏ö
	case total >= 20:
		return 2 // ‡∏ô‡πâ‡∏≠‡∏¢
	default:
		return 1 // ‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å
	}
}
