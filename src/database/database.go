package database

import (
	"context"
	"fmt"
	"log"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"go.mongodb.org/mongo-driver/mongo/readpref"
)

var client *mongo.Client

// ConnectMongoDB ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Database
func ConnectMongoDB() error {
	clientOptions := options.Client().ApplyURI("mongodb+srv://aphiwitrr:8bZ24ie8b7oTYoRk@cluster0.2sydc.mongodb.net/")

	var err error
	client, err = mongo.Connect(context.TODO(), clientOptions)
	if err != nil {
		return err
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
	err = client.Ping(context.TODO(), readpref.Primary())
	if err != nil {
		return err
	}

	log.Println("‚úÖ MongoDB connected successfully")

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Database
	ListDatabases()

	return nil
}

// ListDatabases ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Database ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
func ListDatabases() {
	if client == nil {
		log.Fatal("‚ùå MongoDB client is nil")
	}

	// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Database
	dbs, err := client.ListDatabaseNames(context.TODO(), bson.M{})
	if err != nil {
		log.Fatal("‚ùå Error listing databases:", err)
	}

	fmt.Println("üìå Databases in MongoDB:")
	for _, db := range dbs {
		fmt.Println(" -", db)
	}
}

// GetCollection ‡∏£‡∏±‡∏ö Collection ‡∏à‡∏≤‡∏Å MongoDB
func GetCollection(dbName, collectionName string) *mongo.Collection {
	if client == nil {
		log.Fatal("‚ùå MongoDB client is nil")
	}
	return client.Database(dbName).Collection(collectionName)
}
