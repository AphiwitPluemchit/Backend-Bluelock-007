definitions:
  models.Activity:
    properties:
      activityState:
        example: planning
        type: string
      endDateEnroll:
        type: string
      file:
        example: image.jpg
        type: string
      foodVotes:
        items:
          $ref: '#/definitions/models.FoodVote'
        type: array
      id:
        type: string
      name:
        example: Football Tournament
        type: string
      skill:
        example: hard
        type: string
      type:
        example: one
        type: string
    type: object
  models.ActivityDto:
    properties:
      activityItems:
        items:
          $ref: '#/definitions/models.ActivityItemDto'
        type: array
      activityState:
        example: planning
        type: string
      endDateEnroll:
        type: string
      file:
        example: image.jpg
        type: string
      foodVotes:
        items:
          $ref: '#/definitions/models.FoodVote'
        type: array
      id:
        type: string
      name:
        example: Football Tournament
        type: string
      skill:
        example: hard
        type: string
      type:
        example: one
        type: string
    type: object
  models.ActivityItemDto:
    properties:
      activityId:
        type: string
      dates:
        items:
          $ref: '#/definitions/models.Dates'
        type: array
      description:
        example: Quarter Final
        type: string
      enrollmentCount:
        type: integer
      hour:
        example: 4
        type: integer
      id:
        type: string
      majors:
        example:
        - CS
        - SE
        - ITDI
        - AAI
        items:
          type: string
        type: array
      maxParticipants:
        example: 22
        type: integer
      name:
        example: Quarter Final
        type: string
      operator:
        example: Operator 1
        type: string
      rooms:
        example:
        - Room 1
        - Room 2
        items:
          type: string
        type: array
      studentYears:
        example:
        - 1
        - 2
        - 3
        - 4
        items:
          type: integer
        type: array
    type: object
  models.ActivityItemSum:
    properties:
      activityItemName:
        type: string
      registeredByMajor:
        items:
          $ref: '#/definitions/models.MajorEnrollment'
        type: array
    type: object
  models.Admin:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  models.Course:
    properties:
      description:
        example: Learn the basics of programming with this introductory course
        type: string
      hour:
        example: 4
        type: integer
      id:
        example: 507f1f77bcf86cd799439011
        type: string
      isActive:
        example: true
        type: boolean
      isHardSkill:
        description: true = hard skill, false = soft skill
        example: true
        type: boolean
      issuer:
        example: Computer Science Department
        type: string
      link:
        example: https://www.example.com/course
        type: string
      name:
        example: Introduction to Programming
        type: string
      type:
        enum:
        - lms
        - buumooc
        - thaimooc
        example: lms
        type: string
    type: object
  models.CoursePaginatedResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Course'
        type: array
      meta:
        $ref: '#/definitions/models.PaginationMeta'
    type: object
  models.Dates:
    properties:
      date:
        example: "2025-03-11"
        type: string
      etime:
        example: "12:00"
        type: string
      stime:
        example: "10:00"
        type: string
    type: object
  models.Enrollment:
    properties:
      activityItemId:
        type: string
      food:
        type: string
      id:
        type: string
      registrationDate:
        type: string
      student:
        allOf:
        - $ref: '#/definitions/models.Student'
        description: เพิ่ม `Student` ในโครงสร้าง Enrollment JSON ไม่ลง BSON ใน MongoDB
      studentId:
        type: string
    type: object
  models.EnrollmentSummary:
    properties:
      activityItemSums:
        items:
          $ref: '#/definitions/models.ActivityItemSum'
        type: array
      maxParticipants:
        type: integer
      remainingSlots:
        type: integer
      totalRegistered:
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      message:
        description: รายละเอียดของ Error
        type: string
      status:
        description: HTTP Status Code
        type: integer
    type: object
  models.Food:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  models.FoodVote:
    properties:
      foodName:
        example: Pizza
        type: string
      vote:
        type: integer
    type: object
  models.MajorEnrollment:
    properties:
      count:
        type: integer
      majorName:
        type: string
    type: object
  models.PaginationMeta:
    properties:
      hasNext:
        type: boolean
      hasPrevious:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      totalPages:
        type: integer
    type: object
  models.Student:
    properties:
      code:
        type: string
      engName:
        type: string
      hardSkill:
        type: integer
      id:
        type: string
      major:
        type: string
      name:
        type: string
      softSkill:
        type: integer
      status:
        description: 0พ้นสภาพ 1ชั่วโมงน้อยมาก 2ชั่วโมงน้อย 3ชั่วโมงครบแล้ว 4ออกผึกแล้ว
        type: integer
    type: object
  models.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
info:
  contact: {}
  description: This is the API documentation for Bluelock project.
  title: Bluelock API
  version: "1.0"
paths:
  /activitys:
    get:
      description: Get all activities with pagination, search, and sorting
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - default: name
        description: Field to sort by
        in: query
        name: sortBy
        type: string
      - default: asc
        description: Sort order (asc or desc)
        in: query
        name: order
        type: string
      - description: Filter by skill
        in: query
        name: skills
        type: string
      - description: Filter by activityState
        in: query
        name: activityStates
        type: string
      - description: Filter by major
        in: query
        name: majors
        type: string
      - description: Filter by studentYear
        in: query
        name: studentYears
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all activities with pagination, search, and sorting
      tags:
      - activitys
    post:
      consumes:
      - application/json
      description: Create a new activity
      parameters:
      - description: Activity and ActivityItems
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ActivityDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Activity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new activity
      tags:
      - activitys
  /activitys/{id}:
    delete:
      description: Delete an activity
      parameters:
      - description: Activity ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete an activity
      tags:
      - activitys
    get:
      description: Get an activity by ID
      parameters:
      - description: Activity ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Activity'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get an activity by ID
      tags:
      - activitys
    put:
      description: Update an activity
      parameters:
      - description: Activity ID
        in: path
        name: id
        required: true
        type: string
      - description: Activity object
        in: body
        name: activity
        required: true
        schema:
          $ref: '#/definitions/models.Activity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Activity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update an activity
      tags:
      - activitys
  /activitys/{id}/enrollment-summary:
    get:
      description: Get enrollment summary by activity ID
      parameters:
      - description: Activity ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EnrollmentSummary'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get enrollment summary by activity ID
      tags:
      - activitys
  /activitys/{id}/enrollments:
    get:
      description: Get enrollments by activity ID
      parameters:
      - description: ActivityItem ID
        in: path
        name: id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      - description: Sort by field
        in: query
        name: sortBy
        type: string
      - description: Sort order
        in: query
        name: order
        type: string
      - description: Filter by majors
        in: query
        name: majors
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by student years
        in: query
        name: years
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get enrollments by activity ID
      tags:
      - activitys
  /activitys/{id}/image:
    delete:
      description: Delete an image for an activity
      parameters:
      - description: Activity ID
        in: path
        name: id
        required: true
        type: string
      - description: File name
        in: query
        name: filename
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete an image for an activity
      tags:
      - activitys
    post:
      consumes:
      - multipart/form-data
      description: Upload an image for an activity
      parameters:
      - description: Activity ID
        in: path
        name: id
        required: true
        type: string
      - description: File name
        in: query
        name: filename
        type: string
      - description: Image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Upload an image for an activity
      tags:
      - activitys
  /activitys/calendar/{month}/{year}:
    get:
      description: Get all activity calendar
      parameters:
      - description: Month
        in: path
        name: month
        required: true
        type: integer
      - description: Year
        in: path
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ActivityDto'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all activity calendar
      tags:
      - activitys
  /admins:
    get:
      description: Get admins with pagination, search, and sorting
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search by name or email
        in: query
        name: search
        type: string
      - description: 'Sort by field (default: name)'
        in: query
        name: sortBy
        type: string
      - default: asc
        description: Sort order (asc or desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get admins with pagination, search, and sorting
      tags:
      - admins
    post:
      consumes:
      - application/json
      description: Create a new admin
      parameters:
      - description: Admin object
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.Admin'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Admin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new admin
      tags:
      - admins
  /admins/{id}:
    delete:
      description: Delete an admin
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Admin'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete an admin
      tags:
      - admins
    get:
      description: Get an admin by ID
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Admin'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get an admin by ID
      tags:
      - admins
    put:
      consumes:
      - application/json
      description: Update an admin
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: string
      - description: Admin object
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.Admin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Admin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update an admin
      tags:
      - admins
  /courses:
    get:
      description: Get all courses with pagination and filtering options
      parameters:
      - description: จำนวนรายการต่อหน้า
        example: 10
        in: query
        name: limit
        type: integer
      - description: ทิศทางการเรียง (asc/desc)
        example: desc
        in: query
        name: order
        type: string
      - description: หมายเลขหน้าที่ต้องการ
        example: 1
        in: query
        name: page
        type: integer
      - description: คำค้นหา (Optional)
        example: ""
        in: query
        name: search
        type: string
      - description: ฟิลด์ที่ใช้เรียงลำดับ
        example: _id
        in: query
        name: sortBy
        type: string
      - in: query
        name: isActive
        type: boolean
      - in: query
        name: isHardSkill
        type: boolean
      - description: lms, buumooc, thaimooc
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CoursePaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all courses with pagination and filtering
      tags:
      - courses
    post:
      consumes:
      - application/json
      description: Create a new course
      parameters:
      - description: Course object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Course'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new course
      tags:
      - courses
  /courses/{id}:
    delete:
      description: Delete a course
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a course
      tags:
      - courses
    get:
      description: Get a course by ID
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Course'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a course by ID
      tags:
      - courses
    put:
      consumes:
      - application/json
      description: Update a course
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      - description: Course object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Course'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a course
      tags:
      - courses
  /enrollments:
    post:
      consumes:
      - application/json
      description: นักศึกษาสามารถลงทะเบียนกิจกรรมได้
      parameters:
      - description: Enrollment data
        in: body
        name: enrollment
        required: true
        schema:
          $ref: '#/definitions/models.Enrollment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: ลงทะเบียนกิจกรรม
      tags:
      - enrollments
  /enrollments/{enrollmentId}:
    delete:
      description: นักศึกษาสามารถยกเลิกการลงทะเบียนกิจกรรมได้
      parameters:
      - description: Enrollment ID
        in: path
        name: enrollmentId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: ยกเลิกการลงทะเบียนกิจกรรม
      tags:
      - enrollments
  /enrollments/activity/{activityItemId}:
    get:
      description: แอดมินสามารถดูรายชื่อนักศึกษาที่ลงทะเบียนในกิจกรรมได้
      parameters:
      - description: Activity Item ID
        in: path
        name: activityItemId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Enrollment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: ดูนักศึกษาที่ลงทะเบียนในกิจกรรม
      tags:
      - enrollments
  /enrollments/student/{studentId}:
    get:
      description: ให้นักศึกษาดูรายการกิจกรรมที่ลงทะเบียนไว้ทั้งหมด
      parameters:
      - description: Student ID
        in: path
        name: studentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Enrollment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: ดึงรายการกิจกรรมที่นักศึกษาลงทะเบียนไว้
      tags:
      - enrollments
  /enrollments/student/{studentId}/activity/{activityId}:
    get:
      description: ดึงข้อมูล Enrollment ที่ Student ลงทะเบียนใน Activity นี้ (รวม
        activity และ activityItem details)
      parameters:
      - description: Student ID
        in: path
        name: studentId
        required: true
        type: string
      - description: Activity ID
        in: path
        name: activityId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Enrollment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: ดึงข้อมูล Enrollment ของ Student ใน Activity
      tags:
      - enrollments
  /enrollments/student/{studentId}/activity/{activityId}/check:
    get:
      description: ตรวจสอบว่านักศึกษาได้ลงทะเบียนในกิจกรรมนี้หรือไม่ และส่งข้อมูลกิจกรรมที่คล้ายกับ
        activity getOne
      parameters:
      - description: Student ID
        in: path
        name: studentId
        required: true
        type: string
      - description: Activity ID
        in: path
        name: activityId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: ตรวจสอบว่านักศึกษาลงทะเบียนในกิจกรรมหรือไม่
      tags:
      - enrollments
  /enrollments/student/{studentId}/activityItem/{activityItemId}:
    get:
      description: นักศึกษาสามารถดูรายละเอียดของกิจกรรมที่ลงทะเบียนไว้
      parameters:
      - description: Student ID
        in: path
        name: studentId
        required: true
        type: string
      - description: Activity Item ID
        in: path
        name: activityItemId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EnrollmentSummary'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: ดูรายละเอียดของกิจกรรมที่นักศึกษาลงทะเบียนไว้ (เฉพาะ 1 รายการ)
      tags:
      - enrollments
  /foods:
    get:
      description: ดึงข้อมูลอาหารที่มีอยู่ทั้งหมด
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Food'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: ดึงรายการอาหารทั้งหมด
      tags:
      - foods
    post:
      consumes:
      - application/json
      description: สร้างข้อมูลอาหาร 1 รายการ
      parameters:
      - description: ข้อมูลอาหาร
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Food'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Food'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: เพิ่มข้อมูลอาหาร
      tags:
      - foods
  /foods/{id}:
    delete:
      description: ลบข้อมูลอาหารออกจากระบบ
      parameters:
      - description: Food ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: ลบข้อมูลอาหาร
      tags:
      - foods
    get:
      description: ค้นหาข้อมูลอาหารโดยใช้ ID
      parameters:
      - description: Food ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Food'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: ดึงข้อมูลอาหารตาม ID
      tags:
      - foods
    put:
      consumes:
      - application/json
      description: อัปเดตข้อมูลอาหารที่มีอยู่
      parameters:
      - description: Food ID
        in: path
        name: id
        required: true
        type: string
      - description: ข้อมูลอาหารที่ต้องการอัปเดต
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Food'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: อัปเดตข้อมูลอาหาร
      tags:
      - foods
  /students:
    get:
      consumes:
      - application/json
      description: Get all students with optional filters
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: limit
        type: integer
      - description: Search keyword
        in: query
        name: search
        type: string
      - description: Sort by field
        in: query
        name: sortBy
        type: string
      - description: Order (asc/desc)
        in: query
        name: order
        type: string
      - description: Student status (comma separated)
        in: query
        name: studentStatus
        type: string
      - description: Major (comma separated)
        in: query
        name: major
        type: string
      - description: Student year (comma separated)
        in: query
        name: studentYear
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get students
      tags:
      - students
    post:
      consumes:
      - application/json
      description: Create one or more students
      parameters:
      - description: List of students to create
        in: body
        name: students
        required: true
        schema:
          items:
            $ref: '#/definitions/models.Student'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
      summary: Create students
      tags:
      - students
  /students/{code}:
    get:
      consumes:
      - application/json
      description: Get a student by their code
      parameters:
      - description: Student code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Student'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get student by code
      tags:
      - students
  /students/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a student by ID
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete student
      tags:
      - students
    put:
      consumes:
      - application/json
      description: Update a student's information
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: string
      - description: Student data
        in: body
        name: student
        required: true
        schema:
          $ref: '#/definitions/models.Student'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update student
      tags:
      - students
swagger: "2.0"
