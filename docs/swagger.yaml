definitions:
  controllers.CheckInOutRecordItem:
    properties:
      checkin:
        description: เวลา check in (HH:mm format) (optional)
        example: "09:00"
        type: string
      checkout:
        description: เวลา check out (HH:mm format) (optional)
        example: "17:30"
        type: string
      date:
        description: วันที่ (YYYY-MM-DD)
        example: "2024-10-26"
        type: string
    type: object
  controllers.CreateTestEnrollmentRequest:
    properties:
      food:
        description: อาหาร (optional)
        example: vegetarian
        type: string
      programItemId:
        description: ID ของ programItem
        example: 507f1f77bcf86cd799439
        type: string
      studentCode:
        description: รหัสนิสิต
        example: "6516030959"
        type: string
    type: object
  controllers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  controllers.UpdateCertificateStatusRequest:
    properties:
      remark:
        example: Certificate verified by admin
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.StatusType'
        enum:
        - pending
        - approved
        - rejected
        example: approved
    type: object
  controllers.UpdateCheckInOutRequest:
    properties:
      checkinoutRecord:
        description: รายการ check-in/out
        items:
          $ref: '#/definitions/controllers.CheckInOutRecordItem'
        type: array
      enrollmentId:
        description: ID ของ enrollment
        example: 507f1f77bcf86cd799439
        type: string
    type: object
  models.Admin:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  models.Block:
    properties:
      choices:
        items:
          $ref: '#/definitions/models.Choice'
        type: array
      description:
        type: string
      formId:
        type: string
      id:
        type: string
      isRequired:
        type: boolean
      rows:
        items:
          $ref: '#/definitions/models.Row'
        type: array
      sequence:
        type: integer
      session:
        type: integer
      title:
        type: string
      type:
        type: string
    type: object
  models.Choice:
    properties:
      blockId:
        type: string
      id:
        type: string
      sequence:
        type: integer
      title:
        type: string
    type: object
  models.Course:
    properties:
      certificateName:
        example: Introduction to Programming Certificate
        type: string
      certificateNameEng:
        example: Introduction to Programming Certificate
        type: string
      hour:
        example: 4
        type: integer
      id:
        example: 507f1f77bcf86cd799439011
        type: string
      imagePath:
        description: Image file URL for course
        example: upload/image.jpg
        type: string
      isActive:
        example: true
        type: boolean
      isHardSkill:
        description: true = hard skill, false = soft skill
        example: true
        type: boolean
      issuer:
        example: Computer Science Department
        type: string
      link:
        example: https://www.example.com/course
        type: string
      name:
        example: Introduction to Programming
        type: string
      type:
        enum:
        - lms
        - buumooc
        - thaimooc
        example: lms
        type: string
      videoUrl:
        description: Tutorial video URL for certificate claiming
        example: https://www.youtube.com/watch?v=example
        type: string
    type: object
  models.CoursePaginatedResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Course'
        type: array
      meta:
        $ref: '#/definitions/models.PaginationMeta'
    type: object
  models.Dates:
    properties:
      date:
        example: "2025-03-11"
        type: string
      etime:
        example: "12:00"
        type: string
      stime:
        example: "10:00"
        type: string
    type: object
  models.EnrollmentSummary:
    properties:
      maxParticipants:
        type: integer
      programItemSums:
        items:
          $ref: '#/definitions/models.ProgramItemSum'
        type: array
      remainingSlots:
        type: integer
      totalRegistered:
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      message:
        description: รายละเอียดของ Error
        type: string
      status:
        description: HTTP Status Code
        type: integer
    type: object
  models.Food:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  models.FoodVote:
    properties:
      foodName:
        example: Pizza
        type: string
      vote:
        type: integer
    type: object
  models.Form:
    properties:
      blocks:
        items:
          $ref: '#/definitions/models.Block'
        type: array
      description:
        type: string
      id:
        type: string
      isOrigin:
        type: boolean
      title:
        type: string
    type: object
  models.HourChangeHistory:
    properties:
      changeAt:
        description: เวลาที่เกิดการเปลี่ยนแปลง
        type: string
      enrollmentId:
        description: enrollment ID (สำหรับ program)
        type: string
      hourChange:
        description: จำนวนชั่วโมงที่เปลี่ยน (บวก = เพิ่ม, ลบ = ลด)
        type: integer
      id:
        type: string
      remark:
        description: หมายเหตุ
        type: string
      skillType:
        description: '"soft" | "hard"'
        type: string
      sourceId:
        description: ID ของ program/certificate ที่เป็นต้นเหตุ
        type: string
      sourceType:
        description: '"program" | "certificate"'
        type: string
      status:
        description: HCStatus* constants
        type: string
      studentId:
        description: นิสิตที่ได้รับผลกระทบ
        type: string
      title:
        description: หัวข้อ/ชื่อของการเปลี่ยนแปลง
        type: string
    type: object
  models.HourHistoryPaginatedResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.HourChangeHistory'
        type: array
      meta:
        $ref: '#/definitions/models.PaginationMeta'
    type: object
  models.MajorEnrollment:
    properties:
      count:
        type: integer
      majorName:
        type: string
    type: object
  models.PaginationMeta:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      totalPages:
        type: integer
    type: object
  models.Program:
    properties:
      endDateEnroll:
        type: string
      file:
        example: image.jpg
        type: string
      foodVotes:
        items:
          $ref: '#/definitions/models.FoodVote'
        type: array
      formId:
        type: string
      id:
        type: string
      name:
        example: Football Tournament
        type: string
      programState:
        example: planning
        type: string
      skill:
        example: hard
        type: string
      type:
        example: one
        type: string
    type: object
  models.ProgramDto:
    properties:
      endDateEnroll:
        type: string
      file:
        example: image.jpg
        type: string
      foodVotes:
        items:
          $ref: '#/definitions/models.FoodVote'
        type: array
      formId:
        type: string
      id:
        type: string
      name:
        example: Football Tournament
        type: string
      programItems:
        items:
          $ref: '#/definitions/models.ProgramItemDto'
        type: array
      programState:
        example: planning
        type: string
      skill:
        example: hard
        type: string
      type:
        example: one
        type: string
    type: object
  models.ProgramItemDto:
    properties:
      dates:
        items:
          $ref: '#/definitions/models.Dates'
        type: array
      description:
        example: Quarter Final
        type: string
      enrollmentCount:
        type: integer
      hour:
        example: 4
        type: integer
      id:
        type: string
      majors:
        example:
        - CS
        - SE
        - ITDI
        - AAI
        items:
          type: string
        type: array
      maxParticipants:
        example: 22
        type: integer
      name:
        example: Quarter Final
        type: string
      operator:
        example: Operator 1
        type: string
      programId:
        type: string
      rooms:
        example:
        - Room 1
        - Room 2
        items:
          type: string
        type: array
      studentYears:
        example:
        - 1
        - 2
        - 3
        - 4
        items:
          type: integer
        type: array
    type: object
  models.ProgramItemSum:
    properties:
      programItemName:
        type: string
      registeredByMajor:
        items:
          $ref: '#/definitions/models.MajorEnrollment'
        type: array
    type: object
  models.Row:
    properties:
      blockId:
        type: string
      id:
        type: string
      sequence:
        type: integer
      title:
        type: string
    type: object
  models.StatusType:
    enum:
    - pending
    - approved
    - rejected
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusApproved
    - StatusRejected
  models.Student:
    properties:
      code:
        type: string
      engName:
        type: string
      hardSkill:
        type: integer
      id:
        type: string
      major:
        type: string
      name:
        type: string
      softSkill:
        type: integer
      status:
        description: 0พ้นสภาพ 1ชั่วโมงน้อยมาก 2ชั่วโมงน้อย 3ชั่วโมงครบแล้ว 4ออกผึกแล้ว
        type: integer
      year:
        description: ปีการศึกษา เช่น "2567"
        type: string
    type: object
  models.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
info:
  contact: {}
  description: This is the API documentation for Bluelock project.
  title: Bluelock API
  version: "1.0"
paths:
  /admins:
    get:
      description: Get admins with pagination, search, and sorting
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search by name or email
        in: query
        name: search
        type: string
      - description: 'Sort by field (default: name)'
        in: query
        name: sortBy
        type: string
      - default: asc
        description: Sort order (asc or desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get admins with pagination, search, and sorting
      tags:
      - admins
    post:
      consumes:
      - application/json
      description: Create a new admin
      parameters:
      - description: Admin object
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.Admin'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Admin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new admin
      tags:
      - admins
  /admins/{id}:
    delete:
      description: Delete an admin
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Admin'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete an admin
      tags:
      - admins
    get:
      description: Get an admin by ID
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Admin'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get an admin by ID
      tags:
      - admins
    put:
      consumes:
      - application/json
      description: Update an admin
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: string
      - description: Admin object
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.Admin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Admin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update an admin
      tags:
      - admins
  /api/summary-report/enrollment-v2/{programId}:
    get:
      consumes:
      - application/json
      description: ดึงข้อมูล summary ของ program ตาม date ที่ระบุ โดย query จาก enrollment
        collection ด้วย aggregation pipeline รองรับ filter ตาม programItemId
      parameters:
      - description: Program ID
        in: path
        name: programId
        required: true
        type: string
      - description: Date (YYYY-MM-DD)
        in: query
        name: date
        required: true
        type: string
      - description: Program Item ID (optional - สำหรับกรณีมีหลาย programItems ในวันเดียวกัน)
        in: query
        name: programItemId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get enrollment summary by date using aggregation
      tags:
      - Summary Reports
  /api/summary-report/enrollment/{programId}:
    get:
      consumes:
      - application/json
      description: ดึงข้อมูล summary ของ program ตาม date ที่ระบุ โดย query จาก enrollment
        collection โดยตรง รองรับ filter ตาม programItemId
      parameters:
      - description: Program ID
        in: path
        name: programId
        required: true
        type: string
      - description: Date (YYYY-MM-DD)
        in: query
        name: date
        required: true
        type: string
      - description: Program Item ID (optional - สำหรับกรณีมีหลาย programItems ในวันเดียวกัน)
        in: query
        name: programItemId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get enrollment summary by date (Query from enrollment directly)
      tags:
      - Summary Reports
  /api/test/checkinout:
    put:
      consumes:
      - application/json
      description: อัปเดตรายการ check-in/out ของ enrollment (เพิ่ม/ลบ/แก้ไข)
      parameters:
      - description: ข้อมูลสำหรับอัปเดต check-in/out records
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateCheckInOutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: อัปเดต Check-in/out Records
      tags:
      - Test Data
  /api/test/enrollment:
    post:
      consumes:
      - application/json
      description: สร้าง enrollment สำหรับการทดสอบ (ไม่รวม check-in/out)
      parameters:
      - description: ข้อมูลสำหรับสร้าง enrollment
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateTestEnrollmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: สร้างข้อมูลทดสอบ Enrollment
      tags:
      - Test Data
  /api/test/enrollment/{enrollmentId}:
    delete:
      description: ลบ enrollment และ hour history ที่เกี่ยวข้อง
      parameters:
      - description: Enrollment ID
        in: path
        name: enrollmentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: ลบข้อมูลทดสอบ Enrollment
      tags:
      - Test Data
  /auth/google:
    get:
      consumes:
      - application/json
      description: Start Google OAuth authentication flow and return authorization
        URL
      produces:
      - application/json
      responses:
        "200":
          description: OAuth URL generated successfully
          schema:
            additionalProperties: true
            type: object
      summary: Initiate Google OAuth login
      tags:
      - auth
  /auth/google/callback:
    get:
      consumes:
      - application/json
      description: Process Google OAuth callback, authenticate user, and redirect
        with token
      parameters:
      - description: Authorization code from Google
        in: query
        name: code
        required: true
        type: string
      - description: State parameter for security
        in: query
        name: state
        type: string
      produces:
      - application/json
      responses:
        "302":
          description: Redirect to frontend with error
      summary: Handle Google OAuth callback
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password, includes rate limiting
        and security measures
      parameters:
      - description: Login credentials
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful with token and user info
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - invalid format or missing credentials
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - invalid credentials
          schema:
            additionalProperties: true
            type: object
        "429":
          description: Too many requests - rate limited
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error - token generation failed
          schema:
            additionalProperties: true
            type: object
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user by blacklisting token and updating session
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get current user profile information from JWT token
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to fetch profile
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get new access token using refresh token
      parameters:
      - description: Refresh Token
        in: body
        name: refreshToken
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: New access token generated
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid or expired refresh token
          schema:
            additionalProperties: true
            type: object
      summary: Refresh access token
      tags:
      - auth
  /certificates:
    get:
      consumes:
      - application/json
      description: Get Certificates
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit per page
        in: query
        name: limit
        type: integer
      - description: Search query
        in: query
        name: search
        type: string
      - description: Sort by field
        in: query
        name: sortBy
        type: string
      - description: Sort order
        in: query
        name: order
        type: string
      - description: Student ID
        in: query
        name: studentId
        type: string
      - description: Course ID
        in: query
        name: courseId
        type: string
      - description: Status
        in: query
        name: status
        type: string
      - description: Major
        in: query
        name: major
        type: string
      - description: Year
        in: query
        name: year
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get Certificates
      tags:
      - certificates
  /certificates/{id}:
    get:
      consumes:
      - application/json
      description: Get a single certificate by ID
      parameters:
      - description: Certificate ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get Certificate by ID
      tags:
      - certificates
  /certificates/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of a certificate (Admin only). This will automatically
        handle hours calculation.
      parameters:
      - description: Certificate ID
        in: path
        name: id
        required: true
        type: string
      - description: Status update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateCertificateStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update Certificate Status
      tags:
      - certificates
  /certificates/url-verify:
    get:
      consumes:
      - application/json
      description: Verify a URL
      parameters:
      - description: 'URL to verify example: https://learner.thaimooc.ac.th/credential-wallet/10793bb5-6e4f-4873-9309-f25f216a46c7/sahaphap.rit/public'
        in: query
        name: url
        required: true
        type: string
      - description: 'Student ID example: 685abc586c4acf57c7e2f104 (สหภาพ)'
        in: query
        name: studentId
        required: true
        type: string
      - description: 'Course ID example: ThaiMooc: 6890a889ebc423e6aeb5605a or BuuMooc:
          68b5c6b7e30cd42f34959a5e (การออกแบบและนำเสนอ)'
        in: query
        name: courseId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Verify a URL
      tags:
      - certificates
  /courses:
    get:
      description: Get all courses with pagination and filtering options
      parameters:
      - in: query
        name: lastId
        type: string
      - description: จำนวนรายการต่อหน้า
        example: 10
        in: query
        name: limit
        type: integer
      - description: ทิศทางการเรียง (asc/desc)
        example: desc
        in: query
        name: order
        type: string
      - description: หมายเลขหน้าที่ต้องการ
        example: 1
        in: query
        name: page
        type: integer
      - description: คำค้นหา (Optional)
        example: ""
        in: query
        name: search
        type: string
      - description: ฟิลด์ที่ใช้เรียงลำดับ
        example: _id
        in: query
        name: sortBy
        type: string
      - in: query
        name: isActive
        type: boolean
      - in: query
        name: isHardSkill
        type: boolean
      - description: lms, buumooc, thaimooc
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CoursePaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all courses with pagination and filtering
      tags:
      - courses
    post:
      consumes:
      - application/json
      description: Create a new course
      parameters:
      - description: Course object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Course'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new course
      tags:
      - courses
  /courses/{id}:
    delete:
      description: Delete a course
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a course
      tags:
      - courses
    get:
      description: Get a course by ID
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Course'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a course by ID
      tags:
      - courses
    put:
      consumes:
      - application/json
      description: Update a course
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      - description: Course object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Course'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a course
      tags:
      - courses
  /courses/{id}/image:
    delete:
      description: Delete an image for a course and remove the file from disk
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      - description: File name to delete
        in: query
        name: filename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete an image for a course
      tags:
      - courses
    post:
      consumes:
      - multipart/form-data
      description: Upload an image for a course. If filename is provided, the old
        file will be deleted.
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      - description: Old file name to be replaced
        in: query
        name: filename
        type: string
      - description: Image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Upload an image for a course
      tags:
      - courses
  /foods:
    get:
      description: ดึงข้อมูลอาหารที่มีอยู่ทั้งหมด
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Food'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: ดึงรายการอาหารทั้งหมด
      tags:
      - foods
    post:
      consumes:
      - application/json
      description: สร้างข้อมูลอาหาร 1 รายการ
      parameters:
      - description: ข้อมูลอาหาร
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Food'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Food'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: เพิ่มข้อมูลอาหาร
      tags:
      - foods
  /foods/{id}:
    delete:
      description: ลบข้อมูลอาหารออกจากระบบ
      parameters:
      - description: Food ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: ลบข้อมูลอาหาร
      tags:
      - foods
    get:
      description: ค้นหาข้อมูลอาหารโดยใช้ ID
      parameters:
      - description: Food ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Food'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: ดึงข้อมูลอาหารตาม ID
      tags:
      - foods
    put:
      consumes:
      - application/json
      description: อัปเดตข้อมูลอาหารที่มีอยู่
      parameters:
      - description: Food ID
        in: path
        name: id
        required: true
        type: string
      - description: ข้อมูลอาหารที่ต้องการอัปเดต
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Food'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: อัปเดตข้อมูลอาหาร
      tags:
      - foods
  /forms:
    get:
      description: ดึงข้อมูลฟอร์มทั้งหมด
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Form'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get all forms
      tags:
      - forms
    post:
      consumes:
      - application/json
      description: รับข้อมูลฟอร์มจาก client และบันทึกลงฐานข้อมูล
      parameters:
      - description: Form object
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/models.Form'
      produces:
      - application/json
      responses:
        "201":
          description: Form created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to insert form
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Create a new form
      tags:
      - forms
  /forms/{id}:
    delete:
      description: ลบฟอร์มตาม ObjectID
      parameters:
      - description: Form ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Form deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Form not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to delete form
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Delete a form by ID
      tags:
      - forms
    get:
      description: ดึงข้อมูลฟอร์มตามรหัส
      parameters:
      - description: Form ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Form'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get form by ID
      tags:
      - forms
    patch:
      consumes:
      - application/json
      description: อัปเดตข้อมูลฟอร์มตามรหัส
      parameters:
      - description: Form ID
        in: path
        name: id
        required: true
        type: string
      - description: Form object
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/models.Form'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Update a form
      tags:
      - forms
  /hour-history:
    get:
      consumes:
      - application/json
      description: ดึงข้อมูล hour history พร้อม filter sourceType, multiple statuses,
        และ search title
      parameters:
      - in: query
        name: lastId
        type: string
      - description: จำนวนรายการต่อหน้า
        example: 10
        in: query
        name: limit
        type: integer
      - description: ทิศทางการเรียง (asc/desc)
        example: desc
        in: query
        name: order
        type: string
      - description: หมายเลขหน้าที่ต้องการ
        example: 1
        in: query
        name: page
        type: integer
      - description: คำค้นหา (Optional)
        example: ""
        in: query
        name: search
        type: string
      - description: ฟิลด์ที่ใช้เรียงลำดับ
        example: _id
        in: query
        name: sortBy
        type: string
      - description: Search by title
        in: query
        name: search
        type: string
      - description: '"program" | "certificate"'
        in: query
        name: sourceType
        type: string
      - description: Comma-separated statuses
        in: query
        name: status
        type: string
      - description: Student ObjectID
        in: query
        name: studentId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HourHistoryPaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get hour change history with filters
      tags:
      - HourHistory
  /programs:
    get:
      description: Get all programs with pagination, search, and sorting
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - default: name
        description: Field to sort by
        in: query
        name: sortBy
        type: string
      - default: asc
        description: Sort order (asc or desc)
        in: query
        name: order
        type: string
      - description: Filter by skill
        in: query
        name: skills
        type: string
      - description: Filter by programState
        in: query
        name: programStates
        type: string
      - description: Filter by major
        in: query
        name: majors
        type: string
      - description: Filter by studentYear
        in: query
        name: studentYears
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all programs with pagination, search, and sorting
      tags:
      - programs
    post:
      consumes:
      - application/json
      description: Create a new program
      parameters:
      - description: Program and ProgramItems
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ProgramDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Program'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new program
      tags:
      - programs
  /programs/{id}:
    delete:
      description: Delete an program
      parameters:
      - description: Program ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete an program
      tags:
      - programs
    get:
      description: Get an program by ID
      parameters:
      - description: Program ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Program'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get an program by ID
      tags:
      - programs
    put:
      description: Update an program
      parameters:
      - description: Program ID
        in: path
        name: id
        required: true
        type: string
      - description: Program object
        in: body
        name: program
        required: true
        schema:
          $ref: '#/definitions/models.Program'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Program'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update an program
      tags:
      - programs
  /programs/{id}/enrollment-summary:
    get:
      description: Get enrollment summary by program ID
      parameters:
      - description: Program ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EnrollmentSummary'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get enrollment summary by program ID
      tags:
      - programs
  /programs/{id}/image:
    delete:
      description: Delete an image for an program
      parameters:
      - description: Program ID
        in: path
        name: id
        required: true
        type: string
      - description: File name
        in: query
        name: filename
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete an image for an program
      tags:
      - programs
    post:
      consumes:
      - multipart/form-data
      description: Upload an image for an program
      parameters:
      - description: Program ID
        in: path
        name: id
        required: true
        type: string
      - description: File name
        in: query
        name: filename
        type: string
      - description: Image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Upload an image for an program
      tags:
      - programs
  /programs/{id}/run-complete-now:
    post:
      consumes:
      - application/json
      description: Run the complete-program handler synchronously in-process for quick
        testing. This does not require Redis/Asynq and will execute the same logic
        as the background worker.
      parameters:
      - description: Program ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Execute program completion now (in-process)
      tags:
      - programs
  /programs/{id}/trigger-complete:
    post:
      consumes:
      - application/json
      description: Enqueue a complete-program task to run after delaySec seconds.
        Requires Asynq (Redis) configured. Use for testing scheduling behavior.
      parameters:
      - description: Program ID
        in: path
        name: id
        required: true
        type: string
      - default: 5
        description: Delay in seconds
        in: query
        name: delaySec
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Enqueue program completion job (test)
      tags:
      - programs
  /programs/calendar/{month}/{year}:
    get:
      description: Get all program calendar
      parameters:
      - description: Month
        in: path
        name: month
        required: true
        type: integer
      - description: Year
        in: path
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProgramDto'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all program calendar
      tags:
      - programs
  /students:
    get:
      consumes:
      - application/json
      description: Get all students with optional filters
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: limit
        type: integer
      - description: Search keyword
        in: query
        name: search
        type: string
      - description: Sort by field
        in: query
        name: sortBy
        type: string
      - description: Order (asc/desc)
        in: query
        name: order
        type: string
      - description: Student status (comma separated)
        in: query
        name: studentStatus
        type: string
      - description: Major (comma separated)
        in: query
        name: major
        type: string
      - description: Student year (comma separated)
        in: query
        name: studentYear
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get students
      tags:
      - students
    post:
      consumes:
      - application/json
      description: Create one or more students
      parameters:
      - description: List of students to create
        in: body
        name: students
        required: true
        schema:
          items:
            $ref: '#/definitions/models.Student'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
      summary: Create students
      tags:
      - students
  /students/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a student by ID
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete student
      tags:
      - students
    put:
      consumes:
      - application/json
      description: Update a student's information
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: string
      - description: Student data
        in: body
        name: student
        required: true
        schema:
          $ref: '#/definitions/models.Student'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update student
      tags:
      - students
swagger: "2.0"
