x-common: &common
  networks:
    - bluelock-net
  restart: unless-stopped
  environment:
    - TZ=Asia/Bangkok

services:
  # Redis service for caching and message queuing
  redis:
    <<: *common
    image: redis:7
    container_name: bluelock-redis
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    profiles: ["production"]

  # Development Redis with exposed port
  redis-dev:
    <<: *common
    image: redis:7
    container_name: bluelock-redis-dev
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    profiles: ["development"]

  # Asynqmon for task queue monitoring
  asynqmon:
    <<: *common
    image: hibiken/asynqmon
    container_name: bluelock-asynqmon
    ports:
      - "9078:8080"
    environment:
      - REDIS_ADDR=redis:6379
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
    profiles: ["production"]

  # Development Asynqmon with different port
  asynqmon-dev:
    <<: *common
    image: hibiken/asynqmon
    container_name: bluelock-asynqmon-dev
    ports:
      - "8080:8080"
    environment:
      - REDIS_ADDR=redis-dev:6379
    depends_on:
      redis-dev:
        condition: service_healthy
    profiles: ["development"]

  # Golang backend service for development
  backend-dev:
    <<: *common
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bluelock-backend-dev
    ports:
      - "8765:8888"
    volumes:
      - ./uploads:/app/uploads
      - ./.env.dev:/app/.env  # ใช้ .env.dev สำหรับ development
    depends_on:
      redis-dev:
        condition: service_healthy
    profiles: ["development"]

  # Golang backend service for production
  backend-prod:
    <<: *common
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: bluelock-backend-prod
    ports:
      - "8765:8888"
    volumes:
      - ./uploads:/app/uploads
      - ./.env.prod:/app/.env  # ใช้ .env.prod สำหรับ production
    depends_on:
      redis:
        condition: service_healthy
    profiles: ["production"]


  # OCR service with FastAPI (development only)
  ocr:
    <<: *common
    build:
      context: ./ocr
      dockerfile: Dockerfile
    container_name: bluelock-ocr
    environment:
      - MODE=development
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
    profiles: ["development"]

  # Production OCR (no ports exposed)
  ocr-prod:
    <<: *common
    build:
      context: ./ocr
      dockerfile: Dockerfile.prod
    container_name: bluelock-ocr-prod
    environment:
      - MODE=production
    volumes:
      - ./uploads:/app/uploads
    profiles: ["production"]

  # Nginx as reverse proxy
  # nginx:
  #   image: nginx:1.25
  #   container_name: bluelock-nginx
  #   ports:
  #     - "8080:80"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/conf.d:/etc/nginx/conf.d:ro
  #     - ./uploads:/var/www/uploads:ro
  #   restart: always
  #   networks:
  #     - bluelock-net
  #   depends_on:
  #     - backend
  #     - ocr
  #     - asynqmon
  #     - redis

networks:
  bluelock-net:
    driver: bridge

volumes:
  redis-data:
# Usage:
# Development: docker compose --profile development up -d
# Production:  docker compose --profile production up -d
#
# Environment Files:
# - .env.dev: Development environment variables
# - .env.prod: Production environment variables
# - .env.example: Template for environment variables
#
# Services by Profile:
# Development: redis-dev, asynqmon-dev, backend-dev, ocr
# Production: redis, asynqmon, backend-prod, ocr-prod
